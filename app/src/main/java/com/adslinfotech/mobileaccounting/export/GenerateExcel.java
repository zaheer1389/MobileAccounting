package com.adslinfotech.mobileaccounting.export;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.widget.Toast;
import com.adslinfotech.mobileaccounting.R;
import com.adslinfotech.mobileaccounting.dao.PdfDao;
import com.adslinfotech.mobileaccounting.ui.SessionManager;
import com.adslinfotech.mobileaccounting.utils.AppConstants;
import com.adslinfotech.mobileaccounting.utils.AppUtils;
import com.google.android.gms.drive.DriveFile;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

public class GenerateExcel {
  private static List<String> mColmns;
  private static Context mContext;
  private static PdfDao mHeader;
  private static int mIndex;
  private static List<PdfDao> mValues;
  private File exportFile;

  private class Task extends AsyncTask<String, Void, String> {
    private Task() {
    }

    protected String doInBackground(String... urls) {
      GenerateExcel.this.insertData();
      return null;
    }

    protected void onPostExecute(String result) {
      Toast.makeText(GenerateExcel.mContext.getApplicationContext(), "Data exported in excel file and saved on /SimpleAccounting/excel folder Succesfully ", Toast.LENGTH_SHORT).show();
      GenerateExcel.this.openExel();
    }
  }

  public GenerateExcel(Context applicationContext, PdfDao header, ArrayList<String> columns, ArrayList<PdfDao> values, int index) {
    mContext = applicationContext;
    mHeader = header;
    mColmns = columns;
    mValues = values;
    mIndex = index;
  }

  public void excel(Activity context) {
    if (isStoragePermissionGranted(context)) {
      checkSDCard();
    } else {
      Toast.makeText(context, R.string.permission_storage, Toast.LENGTH_LONG).show();
    }
  }

  public boolean isStoragePermissionGranted(Activity context) {
    if (ContextCompat.checkSelfPermission(context, "android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
      return true;
    }
    ActivityCompat.requestPermissions(context, new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 1);
    return false;
  }

  private void checkSDCard() {
    String state = Environment.getExternalStorageState();
    Log.v("db export", "storage state is " + state);
    if (!"mounted".equals(state)) {
      Toast.makeText(mContext.getApplicationContext(), "Sorry! SD card not found.", Toast.LENGTH_LONG).show();
    } else if ("mounted_ro".equals(state)) {
      Toast.makeText(mContext.getApplicationContext(), "Please! Insert sd card ", Toast.LENGTH_LONG).show();
    } else {
      new Task().execute(new String[0]);
    }
  }

  private void openExel() {
    Intent target = new Intent("android.intent.action.VIEW");
    target.setDataAndType(Uri.fromFile(this.exportFile), "application/vnd.ms-excel");
    Intent intent = Intent.createChooser(target, "Open File");
    try {
      intent.addFlags(DriveFile.MODE_READ_ONLY);
      mContext.startActivity(intent);
    } catch (ActivityNotFoundException e) {
    }
  }

  public String getPDFfileName(String folder) {
    String time = AppUtils.getUniqueFileName();
    try {
      return folder + File.separator + AppUtils.getValidFileName(mHeader.getFirst()) + time + ".xls";
    } catch (Exception e) {
      return folder + File.separator + time + ".xls";
    }
  }

  /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
  private void insertData() {
    try {
      int len;
      int i;
      String folder = Environment.getExternalStorageDirectory() + AppConstants.FOLDER + "/excel";
      File directory = new File(folder);
      if (!directory.exists()) {
        directory.mkdirs();
      }
      this.exportFile = new File(getPDFfileName(folder));
      WorkbookSettings wbSettings = new WorkbookSettings();
      wbSettings.setLocale(new Locale("en", "EN"));
      WritableWorkbook workbook = Workbook.createWorkbook(this.exportFile, wbSettings);
      WritableSheet sheet = workbook.createSheet("Simple Accounting", 0);
      sheet.addCell(new Label(1, 1, "Simple Accounting"));
      sheet.addCell(new Label(0, 2, "Report generated by: " + SessionManager.getName() + ", " + new SimpleDateFormat()));
      int j = 2;
      switch (mIndex) {
        case 0:
        case 1:
          sheet.addCell(new Label(0, 3, "Ledger of " + mHeader.getFirst() + " : "));
          sheet.addCell(new Label(0, 4, "Mobile : " + mHeader.getFive()));
          sheet.addCell(new Label(0, 5, "Email : " + mHeader.getSix()));
          sheet.addCell(new Label(0, 7, "Credit : " + mHeader.getSecond()));
          sheet.addCell(new Label(0, 8, "Debit : " + mHeader.getThird()));
          sheet.addCell(new Label(0, 9, "Balance : " + mHeader.getFour()));
          if (mIndex == 0) {
            sheet.addCell(new Label(0, 10, "Opening Bal : " + mHeader.getSeven()));
            sheet.addCell(new Label(0, 11, "Overall Bal : " + mHeader.getEight()));
            j = 14;
          } else {
            j = 12;
          }
        case 2:
          sheet.addCell(new Label(0, 3, "Overall Ledger : "));
          sheet.addCell(new Label(0, 4, "Credit : " + mHeader.getSecond()));
          sheet.addCell(new Label(0, 5, "Debit : " + mHeader.getThird()));
          sheet.addCell(new Label(0, 6, "Balance : " + mHeader.getFour()));
          j = 9;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 3:
          sheet.addCell(new Label(0, 3, "Day Wise Detail Transaction Report : "));
          sheet.addCell(new Label(0, 4, "Credit : " + mHeader.getSecond()));
          sheet.addCell(new Label(0, 5, "Debit : " + mHeader.getThird()));
          sheet.addCell(new Label(0, 6, "Balance : " + mHeader.getFour()));
          j = 9;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao2 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao2.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao2.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao2.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao2.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao2.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao2.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 4:
          sheet.addCell(new Label(0, 3, "Day Wise Commulative Report : "));
          sheet.addCell(new Label(0, 4, "Credit : " + mHeader.getSecond()));
          sheet.addCell(new Label(0, 5, "Debit : " + mHeader.getThird()));
          sheet.addCell(new Label(0, 6, "Balance : " + mHeader.getFour()));
          j = 9;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao22 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao22.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao22.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao22.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao22.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao22.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao22.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 5:
          sheet.addCell(new Label(0, 3, "Last 12 Month Transaction Report : "));
          j = 6;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao222 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao222.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao222.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao222.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao222.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao222.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao222.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 6:
          sheet.addCell(new Label(0, 3, "Reminders As On"));
          j = 6;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao2222 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao2222.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao2222.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao2222.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao2222.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao2222.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao2222.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 7:
          sheet.addCell(new Label(0, 3, "All Reminder List : "));
          j = 6;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao22222 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao22222.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao22222.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao22222.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao22222.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao22222.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao22222.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 8:
          sheet.addCell(new Label(0, 3, "Category wise Balance List : "));
          j = 6;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao222222 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao222222.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao222222.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao222222.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao222222.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao222222.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao222222.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 9:
          sheet.addCell(new Label(0, 3, "All Account List : "));
          j = 6;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao2222222 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao2222222.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao2222222.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao2222222.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao2222222.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao2222222.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao2222222.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 10:
          sheet.addCell(new Label(0, 3, "All Transactions List : "));
          j = 6;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao22222222 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao22222222.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao22222222.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao22222222.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao22222222.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao22222222.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao22222222.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 11:
          sheet.addCell(new Label(0, 3, "Last Transaction Report : "));
          j = 6;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao222222222 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao222222222.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao222222222.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao222222222.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao222222222.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao222222222.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao222222222.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
        case 12:
          sheet.addCell(new Label(0, 3, "Account at a Glance Report : "));
          sheet.addCell(new Label(0, 4, "Total Credit : " + mHeader.getSecond()));
          sheet.addCell(new Label(0, 5, "Total Debit : " + mHeader.getThird()));
          j = 6;
          len = mColmns.size();
          for (i = 0; i < len; i++) {
            sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
          }
          j++;
          for (PdfDao dao2222222222 : mValues) {
            for (i = 0; i < len; i++) {
              switch (i) {
                case 0:
                  sheet.addCell(new Label(0, j, dao2222222222.getFirst()));
                  break;
                case 1:
                  sheet.addCell(new Label(1, j, dao2222222222.getSecond()));
                  break;
                case 2:
                  sheet.addCell(new Label(2, j, dao2222222222.getThird()));
                  break;
                case 3:
                  sheet.addCell(new Label(3, j, dao2222222222.getFour()));
                  break;
                case 4:
                  sheet.addCell(new Label(4, j, dao2222222222.getFive()));
                  break;
                case 5:
                  sheet.addCell(new Label(5, j, dao2222222222.getSix()));
                  break;
                default:
                  break;
              }
            }
            j++;
          }
          workbook.write();
          workbook.close();
      }
      try {
        len = mColmns.size();
        for (i = 0; i < len; i++) {
          sheet.addCell(new Label(i, j, (String) mColmns.get(i)));
        }
        j++;
        for (PdfDao dao22222222222 : mValues) {
          for (i = 0; i < len; i++) {
            switch (i) {
              case 0:
                sheet.addCell(new Label(0, j, dao22222222222.getFirst()));
                break;
              case 1:
                sheet.addCell(new Label(1, j, dao22222222222.getSecond()));
                break;
              case 2:
                sheet.addCell(new Label(2, j, dao22222222222.getThird()));
                break;
              case 3:
                sheet.addCell(new Label(3, j, dao22222222222.getFour()));
                break;
              case 4:
                sheet.addCell(new Label(4, j, dao22222222222.getFive()));
                break;
              case 5:
                sheet.addCell(new Label(5, j, dao22222222222.getSix()));
                break;
              default:
                break;
            }
          }
          j++;
        }
      } catch (RowsExceededException e) {
        e.printStackTrace();
      } catch (Exception e2) {
        e2.printStackTrace();
      }
      workbook.write();
      try {
        workbook.close();
      } catch (WriteException e3) {
        e3.printStackTrace();
      }
    } catch (Exception e22) {
      e22.printStackTrace();
    }
  }
}
